{
  "origin": {
	"prefix": "origin",
	"body": [
	  "#include <bits/stdc++.h>",
	  "using namespace std;",
	  "#pragma GCC optimize(3)",
	  "#pragma GCC optimize(\"inline\")",
	  "#pragma GCC optimize(\"-fgcse\")",
	  "#pragma GCC target(\"avx\",\"sse2\")",
	  "#pragma GCC optimize(\"-fgcse-lm\")",
	  "#pragma GCC optimize(\"-fipa-sra\")",
	  "#pragma GCC optimize(\"-ftree-pre\")",
	  "#pragma GCC optimize(\"-ftree-vrp\")",
	  "#pragma GCC optimize(\"-fpeephole2\")",
	  "#pragma GCC optimize(\"-ffast-math\")",
	  "#pragma GCC optimize(\"-fsched-spec\")",
	  "#pragma GCC optimize(\"unroll-loops\")",
	  "#include <ext/pb_ds/assoc_container.hpp>",
	  "",
	  "template<class integer>",
	  "inline integer to_int(const string& s, size_t* idx = 0, int base = 10) {",
	  "    size_t n = s.size(), i = idx ? *idx : 0; bool sign = false; integer x = 0;",
	  "    if (s[i] == '-')",
	  "        ++i, sign = true;",
	  "    function<int(char)> char_to_digit = [&](char c) {",
	  "        static const int d[] = {'a'-10,'0'}; ",
	  "        return tolower(c)-d[isdigit(c)]; };",
	  "    while (i < n)",
	  "        x *= base, x += char_to_digit(s[i++]);",
	  "    if (idx)",
	  "        *idx = i; ",
	  "    return sign ? -x : x; }",
	  " ",
	  "template<class integer>",
	  "inline string to_string(integer x, int base = 10) {",
	  "    bool sign = false; string s;",
	  "    if (x < 0)",
	  "        x = -x, sign = true;",
	  "    function<char(int)> digit_to_char = [](int d) {",
	  "        static const char c[] = {'a'-10,'0'};",
	  "        return c[d < 10]+d; };",
	  "    do ",
	  "        s += digit_to_char(x%base), x /= base;",
	  "    while (x > 0); ",
	  "    if (sign)",
	  "        s += '-';",
	  "    reverse(s.begin(),s.end());",
	  "    return s; }",
	  " ",
	  "template<class integer>",
	  "inline istream& read(istream& is, integer& x) {",
	  "    string s; is >> s, x = to_int<integer>(s); return is; }",
	  " ",
	  "template<class integer>",
	  "inline ostream& write(ostream& os, integer x) { return os << to_string(x); }",
	  " ",
	  "using  lll =   signed __int128; ",
	  "using ulll = unsigned __int128;",
	  " ",
	  "inline istream& operator>>(istream& is,  lll &x) { return  read(is,x); }",
	  "inline istream& operator>>(istream& is, ulll &x) { return  read(is,x); }",
	  "inline ostream& operator<<(ostream& os,  lll  x) { return write(os,x); }",
	  "inline ostream& operator<<(ostream& os, ulll  x) { return write(os,x); }",
	  "",
	  "#define input cin",
	  "#define output cout",
	  "#define ll long long ",
	  "#define ull unsigned long long",
	  "#define pii pair<int,int>",
	  "#define endl '\\n'",
	  "#define all(v) v.begin(),v.end()",
	  "#define sorta(v) sort(v.begin(),v.end())",
	  "#define mem(a,b) memset(a,b,sizeof(a));",
	  "#define GetBit(u) u & - u;",
	  "#define bit(u,i) ((u >> i) & 1)",
	  "#define mask(i) (1ll << i)",
	  "#define vi vector<int>",
	  "#define int128 __int128",
	  "#define name_in \"input.inp\"",
	  "#define name_out \"output.out\"",
	  "",
	  "// ifstream input(name_in);",
	  "// ofstream output(name_out);",
	  "",
	  "const int cs = 1e6 + 7;",
	  "const int mod = 1e9 + 7;",
	  "const int INF = mod;",
	  "const int maxN = 5e3 + 7;",
	  "const int block_size = 350;",
	  "const ll oo = 1e18 + 7;",
	  "",
	  "template<class X, class Y>",
	  "    bool minimize(X &x, const Y &y) {",
	  "        X eps = 1e-9;",
	  "        if (x > y + eps) {",
	  "            x = y;",
	  "            return true;",
	  "        } else return false;",
	  "    }",
	  "",
	  "template<class X, class Y>",
	  "    bool maximize(X &x, const Y &y) {",
	  "        X eps = 1e-9;",
	  "        if (x + eps < y) {",
	  "            x = y;",
	  "            return true;",
	  "        } else return false;",
	  "    }",
	  "",
	  "template<class T>",
	  "    T Abs(const T &x) {",
	  "        return (x < 0 ? -x : x);",
	  "    }",
	  "",
	  "template<class X, class Y>",
	  "    void Add(X &x , const Y &y) {",
	  "        x += y;",
	  "        if (x > mod) x -= mod;",
	  "    }",
	  "",
	  "template<class X, class Y>",
	  "    void Sub(X &x, const Y &y) {",
	  "        x -= y;",
	  "        if (x < 0) x += mod;",
	  "    }",
	  "",
	  "// ",
	  "",
	  "",
	  "",
	  "",
	  "int main() {",
	  "    ios_base::sync_with_stdio(false);",
	  "    cin.tie(NULL);",
	  "    cout.tie(NULL);",
	  "",
	  "    return 0;",
	  "}"
	],
	"description": ""
  }
}
